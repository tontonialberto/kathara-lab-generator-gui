Requisiti:

Interfaccia grafica per la creazione di un lab Katharà. Nello specifico:
- Operazioni GUI:
    - Aggiungere un dominio di collisione
    - Aggiungere un host
    - Aggiungere un'interfaccia a un host
- Controllo delle connessioni punto-punto (cioè quelle su uno stesso dominio di collisione)
- Generazione di lab.conf a partire da un grafo di nodi (host e domini di collisione)
- Generazione di file .startup, contenente:
    - per ogni interfaccia dell'host, il comando shell per la configurazione dell'indirizzo ipv4
    - un singolo comando "systemctl start frr"
- Rendere possibile il download di uno zip contenente una cartella (dal nome configurabile), con al suo interno:
    - il file lab.conf
    - un file di startup per ogni host
    - una cartella shared, con all'interno
        - un file test_routing.sh che consente di testare la comunicazione con tutte le macchine della rete
    - una cartella per ogni host, contenente le sottocartelle /etc/frr 


 * Aggiungere un dominio di collisione:
 * - id
 *
 * Aggiungere un nodo:
 *  ! non si può aggiungere un nodo che già esiste
 * - id
 * - interfacce:
 *   - nome
 *   - ip address
 *   - mask
 *   - dominio di collisione
 *
 * Rimuovere un nodo:
 *  - id
 * 
 * Generazione dei files:
 *  - un singolo lab.conf
 *    - per ogni dominio di collisione X:
 *      - per ogni macchina m che ha un'interfaccia I su X:
 *        - una riga 'm[I]=X'
 *  - per ogni macchina m:
 *    - per ogni interfaccia I e il suo indirizzo ipv4 addr e la sua netmask:
 *      - una riga 'ip address add addr/mask dev ethI'
 *    - se deve avere frr abilitato: una riga 'systemctl start frr'
 *  - una cartella shared:
 *    - un file test_routing.sh che contiene, per ogni interfaccia presente sulla rete
 *      - una riga 'ping -qc 2 $addr' dove $addr è l'indirizzo associato all'interfaccia
 */


controllo delle connessioni su uno stesso dominio di collisione.
Restituisce una lista di errori di configurazione per ogni coppia di interfacce collegate al dominio che non riescono a comunicare.
checkCollisionDomainConnections

input:
collisionDomain: string // dominio da controllare
interfaces: NetworkInterface[] // interfacce connesse al dominio di collisione

output:
issues: {source: NetworkInterface, target: NetworkInterface}[]

procedimento:
issues = []
per ogni $iface1 in $interfaces:
    netAddress1 = (and bit a bit $iface1.ipv4, $iface1.netmask)
    per ogni $iface2 in $interfaces:
        netAddress2 = (and bit a bit $iface2.ipv4, $iface2.netmask)
        if netAddress1 !== netAddress2:
            issues.push(iface1, iface2)
return issues
        
confronto l'and <address1, mask1> con l'and <address2, mask2>