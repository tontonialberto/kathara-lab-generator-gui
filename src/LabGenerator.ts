import JSZip from "jszip";
import { Host, NetworkInterface } from "./types";
import { saveAs } from "file-saver";

export function generateLabConf(
  hosts: Host[],
  collisionDomains: string[],
  options: {
    lineSeparator: string;
  } = { lineSeparator: "\n" }
): string {
  const lines: string[] = [];

  collisionDomains.forEach((domainName) => {
    const hostsOnDomain = hosts
      .map((host) => {
        return {
          id: host.id,
          interfaces: host.interfaces.filter(
            (iface) => iface.domainId === domainName
          ),
        };
      })
      .filter((host) => host.interfaces.length > 0);

    hostsOnDomain.forEach((host) => {
      host.interfaces.forEach((iface) => {
        const line = `${host.id}[${iface.id}]=${domainName}`;
        lines.push(line);
      });
    });
  });

  return lines.join(options.lineSeparator);
}

export function generateStartupFile(
  host: Host,
  options: {
    lineSeparator: string;
  } = { lineSeparator: "\n" }
): string {
  const lines: string[] = [];

  host.interfaces.forEach((iface) => {
    const line = `ip address add ${iface.ipv4Address}/${iface.netmask} dev eth${iface.id}`;
    lines.push(line);
  });

  if (host.isRouter) {
    lines.push("systemctl start frr");
  }

  return lines.join(options.lineSeparator);
}

export function generateGlobalConnectivityCheckScript(
  interfaces: NetworkInterface[],
  options: {
    lineSeparator: string;
  } = { lineSeparator: "\n" }
): string {
  const lines: string[] = [];

  lines.push(
    "#!/bin/bash",
    'echo "### BEGIN GLOBAL CONNECTIVITY CHECK ###"',
    'echo ""',
    'echo ""',
    "set -e"
  );

  interfaces.forEach((iface) => {
    const line = `ping ${iface.ipv4Address} -qc 2`;
    lines.push(line, 'echo ""', 'echo ""');
  });

  lines.push('echo "### END GLOBAL CONNECTIVITY CHECK ###"');

  return lines.join(options.lineSeparator);
}

export async function createLabZip(
  hosts: Host[],
  collisionDomains: string[]
): Promise<void> {
  const zip = new JSZip();

  // Get lab.conf
  const labConfContent = generateLabConf(hosts, collisionDomains);
  zip.file("lab.conf", labConfContent);

  // Get startup files
  hosts.forEach((host) => {
    const startupContent = generateStartupFile(host);
    zip.file(`${host.id}.startup`, startupContent);
  });

  // Get hosts directories
  hosts.forEach((host) => {
    const hostFolder = zip.folder(host.id);

    // Get routing daemon directory
    if (host.isRouter) {
      const frrFolder = hostFolder?.folder("etc")?.folder("frr");
      frrFolder?.file("vtysh.conf", "service integrated-vtysh-config");

      const zebraConfigFileContent = generateZebraConfigurationFile({
        enableBGP: false,
        enableOSPF: false,
        enableRIP: false
      });
      frrFolder?.file("daemons", zebraConfigFileContent);

      const frrConfigFileContent = generateFrrConfigurationFile();
      frrFolder?.file("frr.conf", frrConfigFileContent);
    }
  });

  // Get shared folder
  const sharedFolder = zip.folder("shared");
  const allInterfaces = hosts.flatMap((host) => host.interfaces);
  const globalConnectivityCheckScriptContent =
    generateGlobalConnectivityCheckScript(allInterfaces);
  sharedFolder?.file("test_routing.sh", globalConnectivityCheckScriptContent);

  const zipContent = await zip.generateAsync({ type: "blob" });
  saveAs(zipContent, "lab.zip");
}

function generateZebraConfigurationFile(config: {
  enableRIP: boolean;
  enableOSPF: boolean;
  enableBGP: boolean;
}): string {
  return `\
zebra=yes
bgpd=${config.enableBGP ? "yes" : "no"}
ospfd=${config.enableOSPF ? "yes" : "no"}
ospf6d=no
ripd=${config.enableRIP ? "yes" : "no"}
ripngd=no
isisd=no
pimd=no
ldpd=no
nhrpd=no
eigrpd=no
babeld=no
sharpd=no
staticd=no
pbrd=no
bfdd=no
fabricd=no

#
# If this option is set the /etc/init.d/frr script automatically loads
# the config via "vtysh -b" when the servers are started.
# Check /etc/pam.d/frr if you intend to use "vtysh"!
#
vtysh_enable=yes
zebra_options=" -s 90000000 --daemon -A 127.0.0.1"
bgpd_options="   --daemon -A 127.0.0.1"
ospfd_options="  --daemon -A 127.0.0.1"
ospf6d_options=" --daemon -A ::1"
ripd_options="   --daemon -A 127.0.0.1"
ripngd_options=" --daemon -A ::1"
isisd_options="  --daemon -A 127.0.0.1"
pimd_options="  --daemon -A 127.0.0.1"
ldpd_options="  --daemon -A 127.0.0.1"
nhrpd_options="  --daemon -A 127.0.0.1"
eigrpd_options="  --daemon -A 127.0.0.1"
babeld_options="  --daemon -A 127.0.0.1"
sharpd_options="  --daemon -A 127.0.0.1"
staticd_options="  --daemon -A 127.0.0.1"
pbrd_options="  --daemon -A 127.0.0.1"
bfdd_options="  --daemon -A 127.0.0.1"
fabricd_options="  --daemon -A 127.0.0.1"

#MAX_FDS=1024
# The list of daemons to watch is automatically generated by the init script.
#watchfrr_options=""

# for debugging purposes, you can specify a "wrap" command to start instead
# of starting the daemon directly, e.g. to use valgrind on ospfd:
#   ospfd_wrap="/usr/bin/valgrind"
# or you can use "all_wrap" for all daemons, e.g. to use perf record:
#   all_wrap="/usr/bin/perf record --call-graph -"
# the normal daemon command is added to this at the end.
`;
}

function generateFrrConfigurationFile(): string {
  return `\
!
! FRRouting configuration file
!
!
debug bgp keepalives
debug bgp updates in
debug bgp updates out
!
log file /var/log/frr/frr.log
`;
}